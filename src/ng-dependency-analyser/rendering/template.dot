digraph ngda {
  compound = true;

  subgraph ui {
    {{~it.getData() :item}}
    {{? item.layer === 'lib/ui'}}
    "{{=item.importName}}"
    "{{=item.importName}}" -> "to-core" [style="invis"]
    {{?}}
    {{~}}
    "to-core" [style="invis", label=""]
  }

  subgraph core {
    "from-ui" [style="invis", label=""]
    {{~it.getData() :item}}
    {{? item.layer === 'lib/core'}}
    "from-ui" -> "{{=item.importName}}" [style="invis"]
    "{{=item.importName}}"
    {{?}}
    {{~}}
  }

  "to-core" -> "from-ui" [style="invis"]

  {{~it.getModules() :module}}
    "{{= module.importName}}" [shape="rect", label="{{= module.name}}"]
    {{~module.requires :required}}
    "{{= required}}" [shape="rect"]
    {{~}}
    {{~module.provides :provide}}
    "{{= provide.importName}}" [shape="{{? provide.type === 'directive'}}diamond{{?}}{{? provide.type !== 'directive'}}ellipse{{?}}", label="{{= provide.name}}"]
    {{~}}
  {{~}}

  {{~it.getModules() :module}}
    {{~module.requires :required}}
    "{{= module.importName}}" -> "{{= required }}" [label="requires"]
    {{~}}
  {{~}}

  {{~it.getModules() :module}}
    {{~module.provides :provide}}
    "{{= module.importName}}" -> "{{= provide.importName }}" [label="provides"]
    {{~}}
  {{~}}

  {{~it.getInjectedDependencies() :injectedDependency}}
  "{{= injectedDependency.importName }}"
  {{~injectedDependency.dependencies :dependency}}
  "{{= dependency.importName}}" [shape="ellipse", label="{{= dependency.name}}"]
  {{~}}
  {{~}}

  {{~it.getInjectedDependencies() :injectedDependency}}
  {{~injectedDependency.dependencies :dependency}}
  "{{= injectedDependency.importName }}" -> "{{= dependency.importName }}" [label="uses"]
  {{~}}
  {{~}}
}
